diff --git a/src/app/message/message-detail/message-detail.component.ts b/src/app/message/message-detail/message-detail.component.ts
index 74c4092..78d6ff9 100644
--- a/src/app/message/message-detail/message-detail.component.ts
+++ b/src/app/message/message-detail/message-detail.component.ts
@@ -1,4 +1,4 @@
-import { Component, OnInit } from '@angular/core';
+import { Component, OnInit, OnDestroy } from '@angular/core';
 import { MessagingService } from '../../shared/services/messaging.service';
 import { AuthenticationService } from '../../shared/services/authentication.service';
 
@@ -7,7 +7,7 @@ import { AuthenticationService } from '../../shared/services/authentication.serv
   templateUrl: './message-detail.component.html',
   styleUrls: ['./message-detail.component.scss']
 })
-export class MessageDetailComponent implements OnInit {
+export class MessageDetailComponent implements OnInit, OnDestroy {
   private message: string;
 
   constructor(
@@ -16,6 +16,11 @@ export class MessageDetailComponent implements OnInit {
   ) {}
 
   ngOnInit() {
+    
+  }
+
+  ngOnDestroy() {
+    this.messagingService.disconnectWebSocket();
   }
 
   onSubmit() {
diff --git a/src/app/shared/header/header.component.ts b/src/app/shared/header/header.component.ts
index 3308393..cabb53b 100644
--- a/src/app/shared/header/header.component.ts
+++ b/src/app/shared/header/header.component.ts
@@ -54,8 +54,7 @@ export class HeaderComponent implements OnInit {
 
   signOutClickHandler() {
     localStorage.clear();
-    this.authenticationService.clearError();
-    this.authenticationService.clearEverythingExceptErrors();
+    this.authenticationService.clearEverything();
     this.itemsService.clearEverything();
     this.messagingService.clearEverything();
   }
diff --git a/src/app/shared/services/authentication.service.ts b/src/app/shared/services/authentication.service.ts
index 1d0ca67..91e6acb 100644
--- a/src/app/shared/services/authentication.service.ts
+++ b/src/app/shared/services/authentication.service.ts
@@ -2,8 +2,8 @@ import { Injectable } from '@angular/core';
 import { HttpClient } from '@angular/common/http';
 import { Router } from "@angular/router";
 import { SERVER_URL } from '../global';
-import bcryptjs = require('bcryptjs');
-import SHA256 = require('crypto-js/hmac-sha256');
+import * as bcryptjs from 'bcryptjs';
+import * as SHA256 from 'crypto-js/hmac-sha256';
 
 const SALT_ROUNDS: number = 10;
 const LOCAL_STORAGE_KEY = 'beach-shop';
@@ -84,20 +84,6 @@ export class AuthenticationService {
     }));
   }
 
-  // Particularly used when there is an error or when the
-  // user signs out of the application.
-  public clearEverythingExceptErrors(): void {
-    this.mFirstName = '';
-    this.mLastName = '';
-    this.mEmail = '';
-    this.mPassword = '';
-    this.mDescription = '';
-    this.mSalt = '';
-    this.mToken = '';
-    this.mUserId = null;
-    this.mIsProcessing = false;
-  }
-
   public clearError() {
     this.mHasError = false;
     this.mErrorMessage = '';
@@ -276,4 +262,32 @@ export class AuthenticationService {
     this.mHasError = false;
     this.mIsProcessing = false;
   }
+
+  // Particularly used when there is an error or when the
+  // user signs out of the application.
+  public clearEverythingExceptErrors(): void {
+    this.mFirstName = '';
+    this.mLastName = '';
+    this.mEmail = '';
+    this.mPassword = '';
+    this.mDescription = '';
+    this.mSalt = '';
+    this.mToken = '';
+    this.mUserId = null;
+    this.mIsProcessing = false;
+  }
+
+  public clearEverything() {
+    this.mFirstName = '';
+    this.mLastName = '';
+    this.mEmail = '';
+    this.mPassword = '';
+    this.mDescription = '';
+    this.mSalt = '';
+    this.mUserId = null;
+    this.mToken = '';
+    this.mHasError = false;;
+    this.mErrorMessage = '';
+    this.mIsProcessing = false;;
+  }
 }
\ No newline at end of file
diff --git a/src/app/shared/services/messaging.service.ts b/src/app/shared/services/messaging.service.ts
index f8e46f7..8127188 100644
--- a/src/app/shared/services/messaging.service.ts
+++ b/src/app/shared/services/messaging.service.ts
@@ -1,12 +1,13 @@
 import * as _ from 'lodash';
+import * as Stomp from 'stompjs';
+import * as SockJS from 'sockjs-client/dist/sockjs.min';
+
 import { Injectable } from '@angular/core';
 import { HttpClient } from '@angular/common/http';
 import { AuthenticationService } from './authentication.service';
 import { SERVER_URL } from '../global';
-import Stomp from 'stompjs';
-import * as SockJS from 'sockjs-client/dist/sockjs.min';
 
-const SOCKET_URL = 'http://localhost:8080/conversation-websocket';
+const SOCKET_URL = 'http://localhost:8080/chat';
 
 @Injectable()
 export class MessagingService {
@@ -14,8 +15,6 @@ export class MessagingService {
   private mConversationArray;
   private mMessages;
   private mConversationDetails;
-
-  private mSocket;
   private mStompClient;
 
   constructor(
@@ -26,7 +25,6 @@ export class MessagingService {
     this.mConversationObj = {};
     this.mConversationArray = [];
     this.mConversationDetails = {};
-    // this.mSocket = new SockJS(SOCKET_URL);
   }
 
   get messages() { return this.mMessages; }
@@ -38,6 +36,7 @@ export class MessagingService {
     this.mConversationObj = {};
     this.mConversationArray = [];
     this.mConversationDetails = {};
+    this.mStompClient = null;
   }
 
   doesConversationExists(conversationId: string) {
@@ -139,38 +138,20 @@ export class MessagingService {
         message
       };
 
-      const headers = {'Authorization': this.authenticationService.token};
-
-      this.http.post(`${SERVER_URL}/messages/add`, bodyObject, {headers, observe: 'response'})
-        .subscribe(
-          (res: any) => {
-            if (res && res.body) {
-              if (this.mConversationObj[res.body.data.conversationId])
-                this.mConversationObj[res.body.data.conversationId].messages.push(res.body.data);
-              else
-                this.mConversationObj[res.body.data.conversationId].messages = [res.body.data];
-
-              this.mMessages = [...this.mConversationObj[this.mConversationDetails.id].messages];
-              this.mConversationArray = _.values(this.mConversationObj);
-            }
-          },
-          err => console.log(err)
-        );
+      this.mStompClient.send(`/app/chats/${this.mConversationDetails.id}`, {}, JSON.stringify(bodyObject));
     }
   }
 
   setDisplayConversation(studentName: string, conversationId: string) {
-    // if (this.mStompClient !== null) {
-    //   this.mStompClient.disconnect();
-    // }
-
-    // this.mStompClient = Stomp.over(this.mSocket);
-    // this.mStompClient.connect({}, (frame) => {
-    //   console.log(frame);
-    //   this.mStompClient.subscribe('/socket/conversation/messages', (msg) => {
-    //     console.log(msg);
-    //   });
-    // });
+    this.disconnectWebSocket();
+
+    let ws = new SockJS(SOCKET_URL);
+    this.mStompClient = Stomp.over(ws);
+    this.mStompClient.connect({}, (frame) => {
+      this.mStompClient.subscribe(`/topic/chat.${conversationId}`, ({body}) => {
+        this.mMessages.push(JSON.parse(body));
+      });
+    });
 
     if (this.mConversationObj[conversationId] && this.mConversationObj[conversationId].messages &&
         this.mConversationObj[conversationId].messages.length) {
@@ -189,4 +170,9 @@ export class MessagingService {
     this.mConversationDetails.id = conversationId;
     this.mConversationDetails.studentName = studentName;
   }
+
+  disconnectWebSocket() {
+    if (this.mStompClient)
+      this.mStompClient.disconnect();
+  }
 }
\ No newline at end of file
